@startuml

skinparam DefaultFontSize 20

create ":Test"

== Arrange ==

create "balanceController:MemberGetsBalanceInDateRangeController"
":Test" -> "balanceController:MemberGetsBalanceInDateRangeController" : new MemberGetsBalanceInDateRangeController()

participant "groupRep:GroupRepository"
participant "group:Group"
participant "ledgerRep:LedgerRepository"
participant "ledger:Ledger"
participant "transaction:Transaction"

== Act  ==

":Test" -> "balanceController:MemberGetsBalanceInDateRangeController" : groupBalance = getGroupBalanceInDateRange\n(initialDate, finalDate, groupID, personID, \nledgerID, groupRep, ledgerRep)
activate "balanceController:MemberGetsBalanceInDateRangeController" #FFBBBB

"balanceController:MemberGetsBalanceInDateRangeController" -> "groupRep:GroupRepository": group = findGroupByID(groupID)
activate "groupRep:GroupRepository" #FFBBBB
deactivate "groupRep:GroupRepository"

"balanceController:MemberGetsBalanceInDateRangeController" --> "group:Group": groupBalance = getBalanceInDateRange\n(initialDate, finalDate, personID, ledgerRep)
activate "group:Group" #FFBBBB

"group:Group" -> "group:Group": boolean =\nisPersonMember(personID)
"group:Group" -> "ledgerRep:LedgerRepository": ledger =\n findMemberByID(ledgerID)
activate "ledgerRep:LedgerRepository" #FFBBBB
deactivate "ledgerRep:LedgerRepository"

"group:Group" -> "ledger:Ledger": groupBalance =\n getBalanceInDateRange(initialDate,finalDate)
activate "ledger:Ledger" #FFBBBB

"ledger:Ledger" -> "transaction:Transaction": boolean = isTransactionInDateRange\n(initialDate,finalDate)
activate "transaction:Transaction" #FFBBBB
"transaction:Transaction" -> "date:OneDate": boolean = isDateInDateRange\n(initialDate,finalDate)
activate "date:OneDate" #FFBBBB
deactivate "date:OneDate"
deactivate "transaction:Transaction"

"ledger:Ledger" -> "transaction:Transaction": amountByType =\n getAmountByType
activate "transaction:Transaction" #FFBBBB

"transaction:Transaction" -> "type:Type": type = getType()
activate "type:Type" #FFBBBB
deactivate "type:Type"

"transaction:Transaction" -> "amount:MonetaryValue": amount = getAmount()
activate "amount:MonetaryValue" #FFBBBB
deactivate "amount:MonetaryValue"

"ledger:Ledger" -> "ledger:Ledger": groupBalance += amountByType

deactivate "transaction:Transaction"
deactivate "ledgerRep:LedgerRepository"
deactivate "groupRep:GroupRepository"
deactivate "ledger:Ledger"
deactivate "group:Group"
deactivate "balanceController:MemberGetsBalanceInDateRangeController"

== Assert ==

":Test" -> ":Test" : assertEquals(expectedGroupBalance, groupBalance)

@enduml