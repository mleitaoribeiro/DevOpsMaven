@startuml
create ":Test"

==Arrange==

create "person1:Person"
":Test" -> "person1:Person" : request transaction creation (date,description)
activate "person1:Person" #FFBBBB

create "cat1:CategoryList"
"person1:Person" -> "cat1:CategoryList" : request list of categories
activate "cat1:CategoryList"  #FFBBBB

"cat1:CategoryList" <- "person1:Person" : return list of categories
deactivate "cat1:CategoryList"  #FFBBBB

"person1:Person" -> "person1:Person" : cat = selected category from the list


create "acc1:AccountsList"
"person1:Person" -> "acc1:AccountsList" : request list of accounts
activate "acc1:AccountsList"  #FFBBBB

"acc1:AccountsList" <- "person1:Person" : return list of accounts
deactivate "acc1:AccountsList"  #FFBBBB

"person1:Person" -> "person1:Person" : accountFrom = selected account to receive credit

"person1:Person" -> "person1:Person" : accountTo = selected account to receive debit


create "amount1:MonetaryValue"
"person1:Person" -> "amount1:MonetaryValue" : request amount value
activate "amount1:MonetaryValue"  #FFBBBB

"amount1:MonetaryValue" <- "person1:Person" : return monetary value
deactivate "amount1:MonetaryValue"  #FFBBBB

"person1:Person" -> "person1:Person" : amount = returned monetary value


create "type1:Type"
"person1:Person" -> "type1:Type" : select type of account
activate "type1:Type"  #FFBBBB

"type1:Type" <- "person1:Person" : return type1 = type of account (debit or credit)
deactivate "type1:Type"  #FFBBBB

== Act ==

create "mov1:Transaction"
"person1:Person" -> "mov1:Transaction" : transaction creation (amount, description, category, accountFrom, accountTo, type)
activate "mov1:Transaction"  #FFBBBB


create "ledg1:Legder"
"mov1:Transaction" -> "ledg1:Legder" : register transaction (amount, description, category, accountFrom, accountTo, type)
activate "ledg1:Legder"  #FFBBBB

"ledg1:Legder" <- "mov1:Transaction" : return registered transaction
deactivate "ledg1:Legder"  #FFBBBB


"mov1:Transaction" <- "person1:Person" : return created transaction
deactivate "mov1:Transaction"  #FFBBBB

== Assert ==

":Test" -> ":Test" : assertTrue(TransactionCreated)

@enduml