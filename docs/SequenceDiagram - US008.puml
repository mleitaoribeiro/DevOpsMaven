  @startuml
create ":Test"
==Arrange==
create "person:Person"
create "catList: CategoryList"
create "acList:AccountsList"
create "ledger:Ledger"

create "amount:MonetaryValue"
":Test" -> "amount:MonetaryValue" : create (amount, currency)

":Test" -> "person:Person" : createCategoryAndAddToCategoryList (nameOfCat)
activate "person:Person"  #FFBBBB
"person:Person" -> "catList: CategoryList" : addCategoryToCategoryList (nameOfCat)
activate "catList: CategoryList"  #FFBBBB
"catList: CategoryList" -> "catList: CategoryList": add (cat)
deactivate "catList: CategoryList"  #FFBBBB
deactivate "person:Person"  #FFBBBB

":Test" -> "person:Person" : createAccount (accountDenomination, accountDescription)
activate "person:Person"  #FFBBBB
"person:Person" -> "acList:AccountsList" : createAndAddAccountToAccountList (accountDenomination, accountDescription)
activate "acList:AccountsList"  #FFBBBB
"acList:AccountsList" -> "acList:AccountsList": add (accountFrom)
"acList:AccountsList" -> "acList:AccountsList": add (accountTo)
deactivate "acList:AccountsList"  #FFBBBB
deactivate "person:Person"  #FFBBBB


== Act ==

":Test" -> "person:Person" : createTransaction (amount, description, \ncat, accountFrom, accountTo, type)
activate "person:Person"  #FFBBBB

"person:Person" -> "ledger:Ledger" : addTransactionToLedger(amount, description, cat, accountFrom, accountTo, type)
activate "ledger:Ledger"  #FFBBBB

create "transaction:Transaction"
"ledger:Ledger" -> "transaction:Transaction" : create (amount, description, cat, accountFrom, accountTo, type)

"ledger:Ledger" -> "ledger:Ledger": add (transactions)
deactivate "ledger:Ledger"  #FFBBBB
deactivate "person:Person"  #FFBBBB

== Assert ==

":Test" -> ":Test" : assertTrue(TransactionCreated)

@enduml